Running Callbacks:
The following methods trigger callbacks:

create
create!
destroy
destroy!
destroy_all
destroy_by
save
save!
save(validate: false)
toggle!
touch
update_attribute
update
update!
valid?

Additionally, the after_find callback is triggered by the following finder methods:

all
first
find
find_by
find_by_*
find_by_*!
find_by_sql
last

The after_initialize callback is triggered every time a new object of the class is initialized.
The find_by_* and find_by_*! methods are dynamic finders generated automatically for every attribute.


# Halting Execution
As you start registering new callbacks for your models, they will be queued for execution. This queue will include all your model's validations, the registered callbacks, and the database operation to be executed.

The whole callback chain is wrapped in a transaction. If any callback raises an exception, the execution chain gets halted and a ROLLBACK is issued. To intentionally stop a chain use:
throw :abort

Any exception that is not ActiveRecord::Rollback or ActiveRecord::RecordInvalid will be re-raised by Rails after the callback chain is halted. Raising an exception other than ActiveRecord::Rollback or ActiveRecord::RecordInvalid may break code that does not expect methods like save and update (which normally try to return true or false) to raise an exception.

