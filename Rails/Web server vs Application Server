Web Server vs Application Server:
A web server handles mainly HTTP protocols, the application server deals with several different protocols, including, but not limited, to HTTP.
The Web server's main job is to display the site content and the application server is in charge of the logic, 
the interaction between the user and the displayed content. The application server is working in conjunction with the web server, where one displays and the other one interacts.

A web server accepts and fulfills requests from clients for static content (i.e., HTML pages, files, images, and videos) from a website. 
Web servers handle HTTP requests and responses only.

An application server exposes business logic to the clients, which generates dynamic content. 
It is a software framework that transforms data to provide the specialized functionality offered by a business, service, or application. 
Application servers enhance the interactive parts of a website that can appear differently depending on the context of the request.

Web server only handles Http request and response.i.e serves only web based applications.
Application Server serves both web(gmail) and enterprise base application(Erp, Crm)

Web Server doesn't support for multi-threading.
Application server Uses multi-threading to support multiple requests in parallel.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

REST:
Stands for REpresentational State Transfer and describes resources (in our case URLs) on which we can perform actions. 
CRUD, which stands for Create, Read, Update, Delete, are the actions that we perform.

RESTful design helps you to create default routes by using resources keyword followed by the controller name in the the routes.rb file
ex- resources :users

which creates seven routes all mapping to the user controller.

resources :users, only: [:index, :new, :create]

Rails also allows you to define multiple resources in one line.
resources :users, :books, :messages

# A REST API sends HTTP requests to endpoints, and receives JSON files in return. The most common requests (or HTTP verbs) are:
GET request - This request reads information from a record in the database.
PUT request - This request changes a record's information in the database.  
POST request - This request creates a new record in the database.  
DELETE request - This request removes a record from the database.

# Controller Namespace and Routing:
Rails allows you to organize groups of controllers under a namespace with a keyword “namespace” during routing. 
For instance grouping Articles and Comments Controllers under Admin controller.

namespace :admin do 
 resources :articles, :comments
end

To get to the articles on your browser you have to prefix it with admin , that is
/admin/articles

Naming Routes.
Instead of using raw urls generated by Rails app, Rails allows you to refer to routes by names. 
For example, the following will create a logout_path or logout_url a named helpers in your application.
get “sessions/destroy”, as: :logout 

To refer to this route anywhere in your application you can write logout_path . 
You can always change the controller and action without refactoring so much code in the views and other controllers

# Redirection
You can redirect any path to another path using the redirect helper in your router:
get ‘/stories’, to: redirect(‘/articles’)


