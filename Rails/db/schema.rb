# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of Active Record to
# incrementally modify your database, and then regenerate this schema definition.
#
# This file is the source Rails uses to define your schema when running `bin/rails
# db:schema:load`. When creating a new database, `bin/rails db:schema:load` tends to
# be faster and is potentially less error prone than running all of your
# migrations from scratch. Old migrations may fail to apply correctly if those
# migrations use external dependencies or application code.
#
# It's strongly recommended that you check this file into your version control system.

ActiveRecord::Schema[7.0].define(version: 2022_05_23_130434) do
  # These are extensions that must be enabled in order to support this database
  enable_extension "plpgsql"

  create_table "appointments", force: :cascade do |t|
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.integer "doctor_id"
    t.integer "patient_id"
  end

  create_table "billings", force: :cascade do |t|
    t.float "amount"
    t.string "payment_type"
    t.integer "appointment_id"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
  end

  create_table "departments", force: :cascade do |t|
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "name"
  end

  create_table "doctors", force: :cascade do |t|
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.integer "department_id"
    t.string "name"
    t.string "address"
    t.date "DOB"
    t.float "salary"
    t.string "phone_no"
  end

  create_table "patient_rooms", force: :cascade do |t|
    t.date "Admitted_On"
    t.date "Discharge_On"
    t.integer "patient_id"
    t.integer "room_id"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
  end

  create_table "patients", force: :cascade do |t|
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "name"
    t.string "address"
    t.date "DOB"
    t.string "gender"
    t.string "phone_no"
  end

  create_table "rooms", force: :cascade do |t|
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.string "type"
    t.float "price"
  end

  add_foreign_key "appointments", "doctors"
  add_foreign_key "appointments", "patients"
  add_foreign_key "billings", "appointments"
  add_foreign_key "doctors", "departments"
  add_foreign_key "patient_rooms", "patients"
  add_foreign_key "patient_rooms", "rooms"
end


# Schema in db folder in Rails project 
-It tends to be faster and less error prone to create a new instance of your applications database by loading the schema file via bin/rails db:schema:load than it is to replay the entire migration history.
-The format of the schema dump generated by Rails is controlled by the config.active_record.schema_format setting in config/application.rb. 
-By default, the format is :ruby, but can also be set to :sql.
-If :ruby is selected, then the schema is stored in db/schema.rb
-The Active Record way claims that intelligence belongs in your models, not in the database. 
-As such, features such as triggers or constraints, which push some of that intelligence back into the database, are not heavily use
Seeing the table of all the migrations done in the project 
-The db/schema.rb or db/structure.sql is a snapshot of the current state of your database and is the authoritative source for rebuilding that database. 
-This makes it possible to delete old migration files.
-When you delete migration files in the db/migrate/ directory, any environment where bin/rails db:migrate was run when those files still existed will hold a reference to the migration timestamp specific to them inside an internal Rails database table named schema_migrations. 
-This table is used to keep track of whether migrations have been executed in a specific environment.
-If you run the bin/rails db:migrate:status command, which displays the status (up or down) of each migration.

itsacheckmate@itsacheckmate:~/Training-Repository/Rvm_Ruby/Rails/hms$ rails db:migrate:status

database: hms_development

 Status   Migration ID    Migration Name
--------------------------------------------------
   up     20220519134709  Create departments
   up     20220523112505  Create doctors
   up     20220523113411  Create appointments
   up     20220523114243  Adding
   up     20220523115758  Create patients
   up     20220523120332  Adding foreign key to appointments table
   up     20220523120844  Create billings
   up     20220523121330  Create rooms
   up     20220523121542  Create patient rooms
   up     20220523125446  Add column to doctors table
   up     20220523130030  Add column to patient table
   up     20220523130337  Add column to departments table
   up     20220523130434  Add column to rooms table
