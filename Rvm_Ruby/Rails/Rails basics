# Rails:
Ruby on Rails is a server-side web application development framework written in Ruby language. It allows you to write less code than other languages and frameworks. 
It includes everything needed to create database-backed web applications according to MVC pattern.
It is opinionated software. 
There are two major guiding principles:
Don't Repeat Yourself (DRY): DRY is a principle of software development which states that "Every piece of knowledge must have an authoritative, unambiguous, single representation within a system. 
If same piece of code will not repeat again and again, code will be more maintainable, extensible and less buggy.
Convention Over Configuration (CoC): It provides different opinions for the best way to do many things in a web application.

# Workflow for Creating Rails Applications
A recommended work flow for creating Rails Application is as follows −
Use the rails command to create the basic skeleton of the application.
Create a database on the PostgreSQL server to hold your data.
Configure the application to know where your database is located and the login credentials for it.
Create Rails Active Records (Models), because they are the business objects you'll be working with in your controllers.
Generate Migrations that simplify the creating and maintaining of database tables and columns.
Write Controller Code to put a life in your application.
Create Views to present your data through User Interface.

Active Record Rails application does not need any configuration at all, if proper naming schemes is followed in your database and classes.
Active Record uses the CoC (convention over configuration) principle. 

Database table should be named in the plural form and in lowercase of your model classes. For example, if a model class name is Student, then corresponding table name will be students. With the help of this convention, Rails will automatically find the corresponding table to your model class without any configuration code. It even supports plural nouns such as 'people' as the plural of 'person'.

# Rails MVC:
Like most of the other frameworks, Rails is also based on MVC pattern. It basically works as following:
Requests first come to the controller, controller finds an appropriate view and interacts with model which in turn interacts with database and send response to controller. 
Then controller gives the output to the view based on the response.

Model
The models are classes in Rails. They interact with database, store data, handles validation, transaction, etc.
This subsystem is implemented in ActiveRecord library. This library provides an interface between database tables and Ruby program code that manipulates database records.
Ruby method names are automatically generated from database tables field names.

View
View represent data in a particular format in an application for the users. It handles HTML, CSS, JavaScript and XML in an application. They do what controller tells them.
This subsystem is implemented in ActionView library. This library is an Embedded Ruby (Erb) based system which define presentation templates for data presentation.

Controller
Controller directs traffic to views and models. It query models for data from the database and display the desired result with the help of view in an application.
This subsystem is implemented in ActionController library. This library is a data broker sitting between ActiveRecord and ActionView.

# ORM: 
ORM is the middle wo/man between a relational database management system and your preferred object-oriented programming language. 
She eases communication between both parties so that the conversation is more fluid, graceful and intuitive. This support is called mapping.
Mapping, or sometimes referred to as wrapping, draws connecting vectors between the database and your language’s models — or “wraps” your queries in more direct, personable code.
While developing programs, ORM provides conventional methods for integrating a database into your code. 
It allows you to access a database table like a Ruby class and a row of your table like an instance of your class, as illustrated below.

# Migrations:
Rails Migration allows you to use Ruby to define changes to your database schema, making it possible to use a version control system to keep things synchronized with the actual code

What Can Rails Migration Do?
-create_table(name, options)
-drop_table(name)
-rename_table(old_name, new_name)
-add_column(table_name, column_name, type, options)
-rename_column(table_name, column_name, new_column_name)
-change_column(table_name, column_name, type, options)
-remove_column(table_name, column_name)
-add_index(table_name, column_name, index_type)
-remove_index(table_name, column_name)

Migrations support all the basic data types − The following is the list of data types that migration supports −
string − for small data types such as a title.
text − for longer pieces of textual data, such as the description.
integer − for whole numbers.
float − for decimals.
datetime and timestamp − store the date and time into a column.
date and time − store either the date only or time only.
binary − for storing data such as images, audio, or movies.
Boolean − for storing true or false values.
Valid column options are − The following is the list of valid column options.
limit ( :limit => “50” )
default (:default => “blah” )
null (:null => false implies NOT NULL)

# Create the Migrations
application_dir> rails generate migration table_name
This will create the file db/migrate/001_table_name.rb. A migration file contains the basic Ruby syntax that describes the data structure of a database table.
NOTE − Before running the migration generator, it is recommended to clean the existing migrations generated by model generators.

# Run the Migration:
library> rake db:migrate

itsacheckmate@itsacheckmate:~/Training-Repository/Rvm_Ruby/Rails/hms$ rails g migration department
      invoke  active_record         
      create    db/migrate/20220519134500_department.rb
itsacheckmate@itsacheckmate:~/Training-Repository/Rvm_Ruby/Rails/hms$ rails generate model department
      invoke  active_record         
      create    db/migrate/20220519134537_create_departments.rb
      create    app/models/department.rb
      invoke    test_unit   
      create      test/models/department_test.rb
      create      test/fixtures/departments.yml
itsacheckmate@itsacheckmate:~/Training-Repository/Rvm_Ruby/Rails/hms$ rails generate model department
      invoke  active_record 
The name 'Department' is either already used in your application or reserved by Ruby on Rails. Please choose an alternative or use --skip-collision-check or --force to skip this check and run this generator again.
itsacheckmate@itsacheckmate:~/Training-Repository/Rvm_Ruby/Rails/hms$ rails generate model department --force
      invoke  active_record
      create    db/migrate/20220519134709_create_departments.rb
   identical    app/models/department.rb
      invoke    test_unit
   identical      test/models/department_test.rb
   identical      test/fixtures/departments.yml
itsacheckmate@itsacheckmate:~/Training-Repository/Rvm_Ruby/Rails/hms$ 

 Session contents restored from 19/05/2022 at 19:23:55 

itsacheckmate@itsacheckmate:~/Training-Repository/Rvm_Ruby/Rails/hms$ rails db:migrate
== 20220519134709 CreateDepartments: migrating ================================
-- create_table(:departments)
   -> 0.0028s
== 20220519134709 CreateDepartments: migrated (0.0029s) =======================

itsacheckmate@itsacheckmate:~/Training-Repository/Rvm_Ruby/Rails/hms$ rails c
Loading development environment (Rails 7.0.3)
3.0.0 :001 > 

 Session contents restored from 20/05/2022 at 19:42:54 





